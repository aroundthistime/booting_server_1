type User{
  id : ID! @id
  email : String! @unique
  name : String
  password : String!
  avatar : String
  gender : String
  birthYear : Int
  department : String
  height : Float
  mbti : Mbti
  isSmoker : Boolean
  drink : Drink
  finishedMilitary : Boolean @default(value : true)
  datingType : [Dating!]! @scalarList(strategy: RELATION)
  avoidSameDepartment : Boolean
  opponentAgeTop : Int
  opponentAgeBottom : Int
  opponentHeightTop : Float
  opponentHeightBottom : Float
  opponentMbti : [Mbti!]! @scalarList(strategy: RELATION)
  opponentIsSmoker : Boolean
  opponentDrink : [Drink!]! @scalarList(strategy: RELATION)
  opponentFinishedMilitary : Boolean
  chats : [Chat!]!
  isBanned : Boolean @default(value : false)
  settingsDone : Boolean @default(value : false)
  isDeactivated : Boolean @default(value : false)
  token : String
}

enum Mbti {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}

enum Drink {
  NEVER
  SOMETIMES
  OFTEN
}

enum Dating {
  HOME
  MOVIE
  SPORTS
  GAMES
  TRAVEL
  EATING
  COOKING
  DRINKING
}

type Response {
  id : ID! @id
  from : User! @relation(name : "ResponseFrom")
  to : User! @relation(name : "ResponseTo")
  isLike : Boolean!
}

type Report {
  id : ID! @id
  from : User! @relation(name : "ReportFrom")
  to : User! @relation(name : "ReportTo")
  reason : String!
}

type Chat {
  id: ID! @id
  participants : [User!]!
  messages : [Message!]!
  createdAt : DateTime! @createdAt
  updatedAt : DateTime! @updatedAt
}

type Message{
  id : ID! @id
  text : String!
  from : User! @relation(name: "From")
  to : User! @relation(name: "To")
  chat : Chat!
  createdAt : DateTime! @createdAt
  updatedAt : DateTime! @updatedAt
}

type Read{
  id : ID! @id
  message : Message! @relation(name : "MessageRead", onDelete : CASCADE)
}